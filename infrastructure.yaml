AWSTemplateFormatVersion: "2010-09-09"
Description: CSYE 6225 Assignment 5 IaC

Parameters:
  VPCCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  SubnetACIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  SubnetBCIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.11.0/24

  SubnetCCIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.12.0/24

  AMIId:
    Description: Id of AMI
    Type: String
    Default: ami-09ef4311235c71091

  HostedZoneName:
    Description: Hosted Zone Name
    Type: String
    Default: prod.ankur.solutions.

  HostedZoneID:
    Type: String
    Description: The DNS ID of an existing Amazon Route 53 hosted zone
    Default: Z06172991P0RABJ9ZV39J

  RootVolumeSize:
    Description: Volume Size
    Type: String
    Default: 50

  RootVolumeType:
    Description: Volume Type
    Type: String
    Default: gp2

  InstanceType:
    Description: Instance Type
    Type: String
    Default: t2.micro

  DeleteOnTermin:
    Description: Delete on Termination
    Type: String
    Default: true

  AvailabilityZoneA:
    Description: Zone A
    Type: Number
    Default: 0

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24

  PrivateSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.22.0/24

  PrivateAZ1:
    Description: Private AZ 1
    Type: Number
    Default: "0"

  PrivateAZ2:
    Description: Private AZ 2
    Type: Number
    Default: "1"

  PrivateAZ3:
    Description: Private AZ 3
    Type: Number
    Default: "2"

  DatabaseEngine:
    Description: Databse type to be used
    Type: String
    Default: postgres

  DBInstanceClass:
    Description: Type of db space to be allocated
    Type: String
    Default: db.t3.micro

  MultiAZDeployment:
    Description: Deploy to multiple availability zones
    Type: String
    Default: "false"
    AllowedValues: [true, false]

  DBInstanceIdentifier:
    Description: Identifier for the instance
    Type: String
    Default: csye6225

  MasterUsername:
    Description: Master username
    Type: String
    Default: csye6225

  MasterPassword:
    Description: Master password
    Type: String
    Default: csye6225

  PublicAccessibility:
    Description: Public Accessibility
    Type: String
    Default: "false"
    AllowedValues: [true, false]

  DatabaseName:
    Description: database name
    Type: String
    Default: csye6225

  CloudFormationSNS:
    Description: sns name
    Type: String
    Default: cloud-formation-SNS

Resources:
  # vpc
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref "AWS::StackName", "-VPC"]]

  # connects to public network
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref SubnetACIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-A

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref SubnetBCIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-B

  SubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref SubnetCCIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-C

  # WebAppInstance:
  #   Type: "AWS::EC2::Instance"
  #   Properties:
  #     ImageId: !Ref AMIId
  #     InstanceType: !Ref InstanceType
  #     NetworkInterfaces:
  #       - AssociatePublicIpAddress: true
  #         DeviceIndex: "0"
  #         GroupSet: [!Ref InstanceSecurityGroup]
  #         SubnetId: !Ref SubnetA
  #     BlockDeviceMappings:
  #       - DeviceName: /dev/sda1
  #         Ebs:
  #           VolumeSize: !Ref RootVolumeSize
  #           DeleteOnTermination: !Ref DeleteOnTermin
  #     IamInstanceProfile: !Ref S3EC2InstanceProfile
  #     UserData:
  #       Fn::Base64: !Sub |
  #         #!/bin/bash
  #         cd /home/ubuntu/webapp/WebApp.CloudApi
  #         rm -f .env
  #         echo -e "Host=${DBinstance.Endpoint.Address}\nBucketName=${AWS::StackName}-test-bucket-s3\nDatabaseName=${DBInstanceIdentifier}\nMasterUsername=${DBInstanceIdentifier}\nMasterPassword=${DBInstanceIdentifier}\nDatabasePort=5432\nSNSName=arn:aws:sns:us-east-1:954333181119:csye6225-sns\n" >> .env
  #         dotnet publish WebApp.CloudApi.csproj --configuration Release
  #         sudo systemctl enable webapp.service
  #         sudo systemctl start webapp.service
  #         sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080
  #         sudo systemctl status webapp.service
    
  S3EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: s3-ec2-instance-profile
      Path: /
      Roles:
        - !Ref S3EC2InstanceRole

  S3EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: s3-ec2-instance-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess

  EC2InstanceS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DemoS3Policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:*
            Resource:
              - !Sub arn:aws:s3:::${EncryptedS3Bucket}
              - !Sub arn:aws:s3:::${EncryptedS3Bucket}/*
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:BatchGetItem
              - dynamodb:Query
              - dynamodb:BatchWrite
              - dynamodb:CreateTable
              - dynamodb:Delete
              - dynamodb:Update
              - dynamodb:PutItem
            Resource: !GetAtt DynamoDBTable.Arn
      Roles:
        - !Ref S3EC2InstanceRole

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"

      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"

      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TableName: "csye6225"
      TimeToLiveSpecification:
        AttributeName: "expiry"
        Enabled: true

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambda-role
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Path: /
      Policies:
        - PolicyName: lambda-role-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                Resource: "arn:aws:ses:us-east-1:954333181119:identity/prod.ankur.solutions"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:::*
              - Effect: Allow
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:Scan"
                Resource: !GetAtt DynamoDBTable.Arn
  
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: lambda-function
      Runtime: nodejs16.x
      Code:
        S3Bucket: "serverless-test-01"
        S3Key: "Lambda.zip"
      Handler: index.handler
      Timeout: 600
      MemorySize: 1024
      EphemeralStorage:
        Size: 1024
      Role: !GetAtt LambdaRole.Arn

  LambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref Lambda
      Principal: sns.amazonaws.com
      SourceArn: !Ref SNSTopic

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !GetAtt Lambda.Arn
          Protocol: lambda
      TopicName: "csye6225-sns"

  Subscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt Lambda.Arn
      Protocol: "lambda"
      TopicArn: !Ref SNSTopic

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: "application"
      GroupDescription: "Allow HTTP/HTTPS and SSH and port 8080"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public

  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetA
      RouteTableId: !Ref PublicRouteTable

  EncryptedS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ["", [!Ref "AWS::StackName", "-test-bucket-s3"]]
      LifecycleConfiguration:
        Rules:
          - Id: TransitionRule
            Prefix: logs
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
    DeletionPolicy: Delete

  # Database
  DbSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupName: "subgroup"
      DBSubnetGroupDescription: "Subnet Group"
      SubnetIds:
        - !Ref "PrivateSubnet1"
        - !Ref "PrivateSubnet2"
        - !Ref "PrivateSubnet3"

  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "database"
      VpcId: !Ref VPC
      GroupDescription: "Allow postgres inbound traffic"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} DB Security Group

  DBParamGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: "Postgres custom parameters" # Required
      Family: postgres13 # Required
      Parameters:
        log_statement: "all"

  DBinstance:
    Type: AWS::RDS::DBInstance
    Properties:
      StorageEncrypted: true
      KmsKeyId: !Ref RdsKey
      DBInstanceClass: !Ref DBInstanceClass
      Engine: !Ref DatabaseEngine
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterPassword
      DBSubnetGroupName: !Ref DbSubnetGroup
      MultiAZ: !Ref MultiAZDeployment
      PubliclyAccessible: !Ref PublicAccessibility
      DBName: !Ref DatabaseName
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      DBParameterGroupName: !Ref DBParamGroup
      AllocatedStorage: "5"
      VPCSecurityGroups:
        - !Ref DBEC2SecurityGroup
    DeletionPolicy: "Snapshot"

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [!Ref PrivateAZ1, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [!Ref PrivateAZ2, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ2)

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [!Ref PrivateAZ3, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ3)

  # Private Route Table

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Routes (AZ)

  # Private route table associations
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref SubnetA

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
  DnsRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref "HostedZoneID"
      Comment: DNS name for my instance.
      RecordSets:
      - Name: !Ref HostedZoneName
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt 'loadBalancer.CanonicalHostedZoneID'
          DNSName: !GetAtt 'loadBalancer.DNSName'
      # Name: !Ref "HostedZoneName"
      # Type: A
      # TTL: "900"
      # ResourceRecords:
      #   - !GetAtt WebAppInstance.PublicIp

  asgLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: VPC
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-launch-template'
      LaunchTemplateData:
        ImageId: !Ref AMIId
        InstanceType: t2.micro
        TagSpecifications:
          - ResourceType: instance
            Tags: 
              - Key: "Name"
                Value: "cloudformation-ec2"
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !Ref InstanceSecurityGroup
            DeleteOnTermination: true      
        # SecurityGroupIds:
        #   - !Ref InstanceSecurityGroup
        BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref RootVolumeSize
            DeleteOnTermination: !Ref DeleteOnTermin
        IamInstanceProfile: 
          Arn: !GetAtt
            - S3EC2InstanceProfile
            - Arn
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080
            cd /home/ubuntu/webapp/WebApp.CloudApi
            rm -f .env
            echo -e "Host=${DBinstance.Endpoint.Address}\nBucketName=${AWS::StackName}-test-bucket-s3\nDatabaseName=${DBInstanceIdentifier}\nMasterUsername=${DBInstanceIdentifier}\nMasterPassword=${DBInstanceIdentifier}\nDatabasePort=5432\nSNSName=arn:aws:sns:us-east-1:954333181119:csye6225-sns\n" >> .env
            dotnet publish WebApp.CloudApi.csproj --configuration Release
            sudo systemctl enable webapp.service
            sudo systemctl start webapp.service
            sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080
            "sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
            -a fetch-config \
            -m ec2 \
            -c file:/opt/aws/amazon-cloudwatch-agent/bin/cloudwatch-config.json \
            -s"
            sudo systemctl status webapp.service

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "ELB"
      GroupDescription: "Allow HTTP/HTTPS"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0 

  asgWebApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-asg
      AvailabilityZones:
        - us-east-1a
        - us-east-1b
        - us-east-1c
      Cooldown: '60'
      DesiredCapacity: '1'
      HealthCheckGracePeriod: 300
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId: !Ref asgLaunchTemplate
        Version: !GetAtt asgLaunchTemplate.LatestVersionNumber
      # LoadBalancerNames:
      #   - String
      MaxSize: '3'
      MinSize: '1'
      # NewInstancesProtectedFromScaleIn: true
      Tags:
        - Key: Application
          Value: WebApp
          PropagateAtLaunch: "true"
        - Key: Name
          Value: !Sub ${AWS::StackName}-asg
          PropagateAtLaunch: "true"
      TargetGroupARNs:
        - !Ref loadBalancerTargetGroup
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB
        - !Ref SubnetC

  # asgCPUPolicy:
  #   Type: AWS::AutoScaling::ScalingPolicy
  #   Properties:
  #     AutoScalingGroupName: !Ref asgWebApp
  #     PolicyType: TargetTrackingScaling
  #     TargetTrackingConfiguration:
  #       PredefinedMetricSpecification:
  #         PredefinedMetricType: ASGAverageCPUUtilization
  #       TargetValue: 40.0

  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: asgWebApp
      Cooldown: '60'
      ScalingAdjustment: '1'

  WebServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: asgWebApp
      Cooldown: '60'
      ScalingAdjustment: '-1'

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 5% for 1 minute
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '1'
      Threshold: '5'
      AlarmActions:
        - Ref: WebServerScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: asgWebApp
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 3% for 1 minute
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '1'
      Threshold: '3'
      AlarmActions:
        - Ref: WebServerScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: asgWebApp
      ComparisonOperator: LessThanThreshold


  loadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: 
      - AttachGateway
      - asgLaunchTemplate
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Name: !Sub ${AWS::StackName}-load-balancer
      Scheme: internet-facing
      SecurityGroups:
        - Ref: LoadBalancerSecurityGroup
      Subnets:
        - !Ref SubnetA
        - !Ref SubnetB
        - !Ref SubnetC
      Tags:
        - Key: Application
          Value: WebApp
        - Key: Name
          Value: !Sub ${AWS::StackName}-load-balancer
      Type: application

  loadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 120
      HealthCheckPath: '/healthz'
      HealthCheckPort: '8080'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      IpAddressType: ipv4
      Name: !Sub ${AWS::StackName}-lb-tg
      Port: 8080
      Protocol: 'HTTP'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-lb-tg
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  loadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: arn:aws:acm:us-east-1:954333181119:certificate/e384d855-3c3b-4aae-8dc6-d0cd4f84fd04
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref loadBalancerTargetGroup
      LoadBalancerArn: !Ref loadBalancer
      Port: 443
      Protocol: HTTPS  

  # KMS RDS encryption key
  RdsKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Id: key-rds
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action: 'kms:*'
            Resource: '*'

  RdsAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/rds
      TargetKeyId: !Ref RdsKey

  EBSKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Id: key-ebs
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action: 'kms:*'
            Resource: '*'

  EBSAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/ebs
      TargetKeyId: !Ref EBSKey

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref SubnetA, !Ref SubnetB, !Ref SubnetC ]]

  SubnetA:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref SubnetA

  SubnetB:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref SubnetB

  SubnetC:
    Description: A reference to the public subnet in the 3rd Availability Zone
    Value: !Ref SubnetC